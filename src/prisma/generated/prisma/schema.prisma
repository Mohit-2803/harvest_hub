// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
  output   = "generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String    @unique
  password              String?
  image                 String?
  emailVerified         DateTime?
  role                  Role      @default(CUSTOMER)
  farmName              String?
  farmLocation          String?
  profileSetupCompleted Boolean   @default(false)

  accounts Account[]
  sessions Session[]
  products Product[]
  orders   Order[]

  // Back-relation for carts
  carts Cart[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String  @id @default(cuid())
  name        String
  image       String?
  price       Decimal
  quantity    Int
  category    String
  description String

  farmerId String
  farmer   User   @relation(fields: [farmerId], references: [id])

  orders    OrderItem[]
  // Back-relation for cart items
  cartItems CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id         String @id @default(cuid())
  customerId String
  customer   User   @relation(fields: [customerId], references: [id])

  orderItems            OrderItem[]
  totalAmount           Decimal
  status                orderStatus @default(PENDING)
  stripeSessionId       String      @default("")
  stripePaymentIntentId String      @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Cart {
  id     String  @id @default(cuid())
  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  items CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model CartItem {
  id        String @id @default(cuid())
  cartId    String
  productId String
  quantity  Int    @default(1)

  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId]) // one line per product
  @@index([productId])
}

enum Role {
  CUSTOMER
  FARMER
  ADMIN
}

enum orderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}
